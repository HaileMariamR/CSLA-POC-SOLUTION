@page "/login"
@using Data_Layer.Model
@using Csla.DataPortalClient;
@using Csla.Configuration;
@using Csla;
@using Csla.Security;
@using Csla.Blazor.Authentication;
@using System.Security.Claims
@using Csla.Blazor
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject cslabwasmpoc.Client.ILocalStorage LocalStorage
@inject IJSRuntime JSRuntime;
@inject IDataPortalProxy Idataportalproxy;

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="w-25">


    <h3>Login</h3>


    <div>
        @foreach (var claim in AuthState.Result.User.Claims)
        {
            <li><p><span>@claim.Type</span>: <span>@claim.Value</span>: <span>@claim.ValueType</span></p></li>
        }
    </div>


    <form class="mt-3">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" class="form-control" @bind-value="loginModel.userName">
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" @bind-value="loginModel.passWord">
        </div>
        <button type="button" class="btn btn-primary" @onclick="LoginHandler">Login</button>
    </form>

    @if (loginError)
    {
        <div class="alert alert-danger mt-3">@loginErrorMessage</div>
    }
    @if (loginSucess)
    {
        <div class="alert alert-sucess mt-2" style="width:400px">@loginSucessMessage</div>
    }

</div>

@code {
    LoginModel loginModel = new LoginModel();

    private bool loginError;
    private bool loginSucess;
    private string? loginErrorMessage;
    private string? loginSucessMessage;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private async Task LoginHandler()
    {
        loginErrorMessage = "";
        loginErrorMessage = "";
        loginError = false;
        loginSucess = false;

        using (var msg= await httpClient.PostAsJsonAsync<LoginModel>("/api/Auth", loginModel))
        {
            if (msg.IsSuccessStatusCode)
            {
                LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
                if (!string.IsNullOrEmpty(result.JwtToken))
                {

                    await LocalStorage.SaveStringAsync("jwtToken", result.JwtToken);
                    await LocalStorage.SaveStringAsync("role", result?.Role);
                    await LocalStorage.SaveStringAsync("userNmae", result?.UserName);
                    await LocalStorage.SaveStringAsync("refreshToken", result?.RefreshToken);
                    loginSucess = true;
                    loginSucessMessage = $"sucessfully logged in {await LocalStorage.GetStringAsync("jwtToken")} && {await LocalStorage.GetStringAsync("refreshToken")}  {result.Role} ";

                    var claims = new Claim[]
                         {
                         new Claim(ClaimTypes.Name, "Test User"),
                         new Claim(ClaimTypes.Role, result?.Role),
                        };

                    

                    var identity = new ClaimsIdentity(claims, "Test", ClaimTypes.Name, ClaimTypes.Role);
                    ((Csla.Blazor.Authentication.CslaAuthenticationStateProvider)AuthenticationStateProvider).SetPrincipal(new System.Security.Claims.ClaimsPrincipal(identity));
                    StateHasChanged();

                    await Task.Delay(3000);
                    Navigation.NavigateTo("/login", true);
                        
                }
                else
                {
                    loginError = true;
                    loginErrorMessage = "Invalid username or password.";
                }
              
   
            }
           

        }

       
      
    }

}
